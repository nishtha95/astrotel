;;
;; Type: UpdateDetails
;; Header: 0xfc5a0c6e
;; TLB: update_details#fc5a0c6e expertise:^string fees:uint32 telegram_id:^string = UpdateDetails
;;

(slice, ((slice, int, slice))) $UpdateDetails$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4233759854);
    var v'expertise = sc_0~load_ref().begin_parse();
    var v'fees = sc_0~load_uint(32);
    var v'telegram_id = sc_0~load_ref().begin_parse();
    return (sc_0, (v'expertise, v'fees, v'telegram_id));
}

;;
;; Type: Astrologer
;; TLB: _ owner:address expertise:^string fees:uint32 telegram_id:^string = Astrologer
;;

(slice, slice, int, slice) $Astrologer$_to_external(((slice, slice, int, slice)) v) inline {
    var (v'owner, v'expertise, v'fees, v'telegram_id) = v; 
    return (v'owner, v'expertise, v'fees, v'telegram_id);
}

((slice, slice, int, slice)) $Astrologer$_constructor_owner_expertise_fees_telegram_id(slice owner, slice expertise, int fees, slice telegram_id) inline {
    return (owner, expertise, fees, telegram_id);
}

;;
;; Type: AstrologerContract
;;

builder $AstrologerContract$_store(builder build_0, (slice, slice, slice, int, slice) v) inline {
    var (v'owner, v'parent, v'expertise, v'fees, v'telegram_id) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'parent);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'expertise).end_cell());
    build_0 = build_0.store_uint(v'fees, 32);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'telegram_id).end_cell());
    return build_0;
}

(slice, ((slice, slice, slice, int, slice))) $AstrologerContract$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'parent = sc_0~__tact_load_address();
    var v'expertise = sc_0~load_ref().begin_parse();
    var v'fees = sc_0~load_uint(32);
    var v'telegram_id = sc_0~load_ref().begin_parse();
    return (sc_0, (v'owner, v'parent, v'expertise, v'fees, v'telegram_id));
}

(slice, ((slice))) $AstrologerContract$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

(slice, slice, slice, int, slice) $AstrologerContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$AstrologerContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner) = $sc~$AstrologerContract$init$_load();
        $sc.end_parse();
        return $AstrologerContract$_contract_init(owner);
    }
}

() $AstrologerContract$_contract_store((slice, slice, slice, int, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $AstrologerContract$_store(b, v);
    set_data(b.end_cell());
}