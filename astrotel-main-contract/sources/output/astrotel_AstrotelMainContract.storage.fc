;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_code_data_body(slice to, int value, int mode, cell code, cell data, cell body) inline {
    return (true, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: AddAstrologer
;; Header: 0x1a64873c
;; TLB: add_astrologer#1a64873c expertise:^string fees:uint32 telgram_id:^string = AddAstrologer
;;

builder $AddAstrologer$_store(builder build_0, (slice, int, slice) v) inline {
    var (v'expertise, v'fees, v'telgram_id) = v;
    build_0 = store_uint(build_0, 442795836, 32);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'expertise).end_cell());
    build_0 = build_0.store_uint(v'fees, 32);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'telgram_id).end_cell());
    return build_0;
}

cell $AddAstrologer$_store_cell((slice, int, slice) v) inline {
    return $AddAstrologer$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, int, slice))) $AddAstrologer$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 442795836);
    var v'expertise = sc_0~load_ref().begin_parse();
    var v'fees = sc_0~load_uint(32);
    var v'telgram_id = sc_0~load_ref().begin_parse();
    return (sc_0, (v'expertise, v'fees, v'telgram_id));
}

;;
;; Type: AstrologerContract
;;

builder $AstrologerContract$init$_store(builder build_0, (slice) v) inline {
    var (v'owner) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    return build_0;
}

(cell, cell) $AstrologerContract$_init_child(cell sys', slice $owner) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: AstrologerContract
    cell mine = __tact_dict_get_code(source, 17916);
    contracts = __tact_dict_set_code(contracts, 17916, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $AstrologerContract$init$_store(b, ($owner));
    return (mine, b.end_cell());
}

;;
;; Type: AstrotelMainContract
;;

builder $AstrotelMainContract$_store(builder build_0, (int, slice, cell, cell, int) v) inline {
    var (v'id, v'owner, v'walletAddressToAstrologerId, v'astrologerIdToContractAddress, v'astrologerCount) = v;
    build_0 = build_0.store_uint(v'id, 8);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_dict(v'walletAddressToAstrologerId);
    build_0 = build_0.store_dict(v'astrologerIdToContractAddress);
    build_0 = build_0.store_uint(v'astrologerCount, 32);
    return build_0;
}

(slice, ((int, slice, cell, cell, int))) $AstrotelMainContract$_load(slice sc_0) inline {
    var v'id = sc_0~load_uint(8);
    var v'owner = sc_0~__tact_load_address();
    var v'walletAddressToAstrologerId = sc_0~load_dict();
    var v'astrologerIdToContractAddress = sc_0~load_dict();
    var v'astrologerCount = sc_0~load_uint(32);
    return (sc_0, (v'id, v'owner, v'walletAddressToAstrologerId, v'astrologerIdToContractAddress, v'astrologerCount));
}

(slice, ((int))) $AstrotelMainContract$init$_load(slice sc_0) inline {
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'id));
}

(int, slice, cell, cell, int) $AstrotelMainContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$AstrotelMainContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int id) = $sc~$AstrotelMainContract$init$_load();
        $sc.end_parse();
        return $AstrotelMainContract$_contract_init(id);
    }
}

() $AstrotelMainContract$_contract_store((int, slice, cell, cell, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $AstrotelMainContract$_store(b, v);
    set_data(b.end_cell());
}