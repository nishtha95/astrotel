#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "astrotel_AstrotelMainContract.headers.fc";
#include "astrotel_AstrotelMainContract.stdlib.fc";
#include "astrotel_AstrotelMainContract.storage.fc";

;;
;; Contract AstrotelMainContract functions
;;

(int, slice, cell, cell, int) $AstrotelMainContract$_contract_init(int $id) impure inline_ref {
    var (($self'id, $self'owner, $self'walletAddressToAstrologerId, $self'astrologerIdToContractAddress, $self'astrologerCount)) = (null(), null(), null(), null(), null());
    $self'id = $id;
    $self'owner = __tact_context_get_sender();
    $self'astrologerCount = 0;
    return ($self'id, $self'owner, $self'walletAddressToAstrologerId, $self'astrologerIdToContractAddress, $self'astrologerCount);
}

((int, slice, cell, cell, int), cell) $AstrotelMainContract$_fun_getAllAstrologers((int, slice, cell, cell, int) $self) impure inline_ref {
    var (($self'id, $self'owner, $self'walletAddressToAstrologerId, $self'astrologerIdToContractAddress, $self'astrologerCount)) = $self;
    return (($self'id, $self'owner, $self'walletAddressToAstrologerId, $self'astrologerIdToContractAddress, $self'astrologerCount), $self'astrologerIdToContractAddress);
}

;;
;; Receivers of a Contract AstrotelMainContract
;;

(((int, slice, cell, cell, int)), ()) $AstrotelMainContract$_internal_binary_AddAstrologer((int, slice, cell, cell, int) $self, (slice, int, slice) $msg) impure inline {
    var ($self'id, $self'owner, $self'walletAddressToAstrologerId, $self'astrologerIdToContractAddress, $self'astrologerCount) = $self;
    var ($msg'expertise, $msg'fees, $msg'telegram_id) = $msg;
    throw_unless(36502, null?(__tact_dict_get_slice_int($self'walletAddressToAstrologerId, 267, __tact_context_get_sender(), 257)));
    var ($init'code, $init'data) = $AstrologerContract$_init_child(__tact_context_sys, __tact_context_get_sender());
    $global_send($SendParameters$_constructor_to_value_mode_code_data_body($global_contractAddress(($init'code, $init'data)), 100000000, 2, $init'code, $init'data, $AddAstrologer$_store_cell(($msg'expertise, $msg'fees, $msg'telegram_id))));
    $self'astrologerCount = $self'astrologerCount + 1;
    $self'walletAddressToAstrologerId~__tact_dict_set_slice_int(267, __tact_context_get_sender(), $self'astrologerCount, 257);
    $self'astrologerIdToContractAddress~__tact_dict_set_int_slice(257, $self'astrologerCount, $global_contractAddress(($init'code, $init'data)));
    return (($self'id, $self'owner, $self'walletAddressToAstrologerId, $self'astrologerIdToContractAddress, $self'astrologerCount), ());
}

(((int, slice, cell, cell, int)), ()) $AstrotelMainContract$_internal_binary_Deploy((int, slice, cell, cell, int) $self, (int) $deploy) impure inline {
    var ($self'id, $self'owner, $self'walletAddressToAstrologerId, $self'astrologerIdToContractAddress, $self'astrologerCount) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'id, $self'owner, $self'walletAddressToAstrologerId, $self'astrologerIdToContractAddress, $self'astrologerCount)~$AstrotelMainContract$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'id, $self'owner, $self'walletAddressToAstrologerId, $self'astrologerIdToContractAddress, $self'astrologerCount), ());
}

;;
;; Get methods of a Contract AstrotelMainContract
;;

_ %getAllAstrologers() method_id(100736) {
    var self = $AstrotelMainContract$_contract_load();
    var res = self~$AstrotelMainContract$_fun_getAllAstrologers();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmQXLqYBnSTQvGLQ35hm5ChRhjPwUhpeHddXEQsmFbLVXg";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract AstrotelMainContract
;;

((int, slice, cell, cell, int), int) $AstrotelMainContract$_contract_router_internal((int, slice, cell, cell, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive AddAstrologer message
    if (op == 2787501289) {
        var msg = in_msg~$AddAstrologer$_load();
        self~$AstrotelMainContract$_internal_binary_AddAstrologer(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$AstrotelMainContract$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $AstrotelMainContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$AstrotelMainContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $AstrotelMainContract$_contract_store(self);
}
